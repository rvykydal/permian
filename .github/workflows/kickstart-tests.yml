# Run kickstart tests in a PR triggered by a "/kickstart-test" comment from an organization member.
name: kickstart-tests
on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  statuses: write

jobs:
  pr-info:
    if: startsWith(github.event.comment.body, '/kickstart-test')
    runs-on: ubuntu-latest
    steps:
      - name: Query comment author repository permissions
        uses: octokit/request-action@v2.x
        id: user_permission
        with:
          route: GET /repos/${{ github.repository }}/collaborators/${{ github.event.sender.login }}/permission
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # restrict running of tests to users with admin or write permission for the repository
      # see https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#get-repository-permissions-for-a-user
      # store output if user is allowed in allowed_user job output so it has to be checked in downstream job
      - name: Check if user does have correct permissions
        if: contains('admin write', fromJson(steps.user_permission.outputs.data).permission)
        id: check_user_perm
        run: |
          echo "User '${{ github.event.sender.login }}' has permission '${{ fromJson(steps.user_permission.outputs.data).permission }}' allowed values: 'admin', 'write'"
          echo "::set-output name=allowed_user::true"

      - name: Get information for pull request
        uses: octokit/request-action@v2.x
        id: pr_api
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      allowed_user: ${{ steps.check_user_perm.outputs.allowed_user }}
      base_ref: ${{ fromJson(steps.pr_api.outputs.data).base.ref }}
      sha: ${{ fromJson(steps.pr_api.outputs.data).head.sha }}

  run:
    needs: pr-info
    if: needs.pr-info.outputs.allowed_user == 'true'
    runs-on: [self-hosted, kstest-permian]
    timeout-minutes: 30
    env:
       STATUS_NAME: kickstart-test smoke test
       TARGET_BRANCH: ${{ needs.pr-info.outputs.base_ref }}
       TEST_JOBS: 16
       TEST_SELECTION: "--testtype smoke --skip-testtypes skip-on-fedora"
    steps:
      # we post statuses manually as this does not run from a pull_request event
      # https://developer.github.com/v3/repos/statuses/#create-a-status
      - name: Create in-progress status
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: '${{ env.STATUS_NAME }}'
          state: pending
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # self-hosted runners don't do this automatically; also useful to keep stuff around for debugging
      # need to run sudo as the launch script and the container create root/other user owned files
      - name: Clean up previous run
        run: |
          sudo podman ps -q --all --filter='ancestor=kstest-runner' | xargs -tr sudo podman rm -f
          sudo podman volume rm --all || true
          sudo rm -rf * .git

      - name: Clone repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.pr-info.outputs.sha }}
          path: permian
          fetch-depth: 0

      - name: Rebase to current ${{ env.TARGET_BRANCH }}
        working-directory: ./permian
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git log --oneline -1 origin/${{ env.TARGET_BRANCH }}
          git rebase origin/${{ env.TARGET_BRANCH }}

      - name: Check out kickstart-tests
        uses: actions/checkout@v3
        with:
          repository: rhinstaller/kickstart-tests
          path: kickstart-tests

      - name: Generate test cases
        working-directory: ./kickstart-tests
        run: scripts/generate-testcases.py -t ./testlib/test_cases/kstest-template.tc.yaml.j2 . -o ./testlib/test_cases

      - name: Clone tclib repository
        uses: actions/checkout@v3
        with:
          repository: rhinstaller/tclib
          path: tclib

      - name: Ensure http proxy is running
        run: sudo kickstart-tests/containers/squid.sh start

      - name: Update container images used here
        run: |
          sudo podman pull quay.io/rhinstaller/kstest-runner:latest

      - name: Fetch boot.iso
        run: |
          mkdir images
          curl -L https://download.fedoraproject.org/pub/fedora/linux/development/rawhide/Server/x86_64/os/images/boot.iso --output images/boot.iso

      - name: Generate query arguments
        id: generate_query
        working-directory: ./kickstart-tests
        run: |
          set -eux
          PERMIAN_QUERY=$(scripts/generate-permian-query.py ${TEST_SELECTION})
          if [ $? == 0 ]; then
            echo "::set-output name=query::$PERMIAN_QUERY"
          else
            echo "Parsing of the request arguments failed"
            exit 1
          fi

      - name: Run kickstart tests in container
        working-directory: ./permian
        run: |
          sudo --preserve-env=TEST_JOBS \
          PYTHONPATH=${PYTHONPATH:-}:${{ github.workspace }}/tclib \
          ./run_subset --debug-log permian.log \
            -o library.directPath="${{ github.workspace }}/kickstart-tests/testlib" \
            -o workflows.dry_run=False \
            -o kickstart_test.kstest_local_repo="${{ github.workspace }}/kickstart-tests" \
            --testcase-query '${{ steps.generate_query.outputs.query }}' \
            run_event '{"type":"github.pr","bootIso":{"x86_64":"file://${{ github.workspace }}/images/boot.iso"},"kstestParams":{"platform":"${{ needs.pr-info.outputs.platform }}"}}'

      - name: Collect anaconda logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'logs'
          # skip the /anaconda subdirectories, too large
          path: |
            kickstart-tests/data/logs/kstest.log
            kickstart-tests/data/logs/kstest-*/*.log
            kickstart-tests/data/additional_repo/*.rpm

      - name: Collect Permian logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'logs-permian'
          path: |
            permian/permian.log

      # Permian hides the exit code of launcher
      - name: Pass the launch script exit code
        working-directory: ./permian
        run: |
          rc=$( awk '/Runner return code: /{ print $4 }' permian.log)
          if [ -n "$rc" ]; then
            exit $rc
          else
            exit 111
          fi

      - name: Set result status
        if: always()
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: '${{ env.STATUS_NAME }}'
          state: ${{ job.status }}
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
